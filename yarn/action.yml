name: "Build Image w/ Yarn"
description: "Build an image using yarn"
author: "GarnerCorp"
branding:
  icon: "aperture"
  color: "purple"
inputs:
  checkout:
    description: Whether or not to checkout the repository you are currently working in
    required: false
    default: "true"
  npm-registry:
    description: "The npm registry from which to retrieve packages"
    default: "https://registry.npmjs.org/"
    required: false
  npm-username:
    description: "Username for the npm-registry"
    required: false
  npm-password:
    description: "Password for the npm-registry"
    required: false
  node-version:
    description: "Node version to use"
    default: "24"
    required: false
  working-directory:
    description: "Directory containing package.json"
    default: "."
    required: false
  yarn-build-command:
    description: "Command to build project"
    default: "yarn build"
    required: false
  source-directory:
    description: "Source directory within working directory (relative to working-directory)"
    default: "src"
    required: false
  test-file-pattern:
    description: "Array of globs for test files"
    default: '["*.spec.js", "*.spec.ts"]'
    required: false
  yarn-test-command:
    description: "Command to run tests"
    default: "yarn test"
    required: false
  yarn-lint-command:
    description: "Command to run ESLint"
    default: "yarn lint"
    required: false
  yarn-build-directory:
    description: "Directory containing output from yarn-build-command (relative to working-directory)"
    default: "dist"
    required: false
  build-output-tarball:
    description: "Output file path (relative to yarn-build-directory)"
    default: "../dist.tar.gz"
    required: false
  publish-to-registry:
    description: "Optionally publish to npm-registry"
    default: "false"
    required: false
  publishing-branch:
    description: "Branch to publish registry off of"
    default: "main"
    required: false
  publishing-directory:
    description: "Directory to publish to npm-registry"
    default: "dist"
    required: false
  skip-package:
    description: "Skip packaging"
    required: false

runs:
  using: "composite"
  steps:
    - name: Validate inputs
      if: ${{ !inputs.google-credentials-json != !inputs.google-cloud-sdk-version || !inputs.npm-username != !inputs.npm-password }}
      shell: bash
      env:
        CODEPENDENT: '[ [ "google-cloud-sdk-version", "google-credentials-json" ], [ "npm-username", "npm-password" ] ]'
        INPUTS: ${{ toJSON(inputs) }}
      run: |
        "$GITHUB_ACTION_PATH/../scripts/report-missing-inputs.pl"

    - name: Checkout
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@v4

    - name: Set up Node ${{ inputs.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Add matchers
      shell: bash
      run: |
        $GITHUB_ACTION_PATH/../scripts/add-matchers.sh

    - name: Validate Yarn version
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        : Validate yarn version
        versioned_package_manager=$(jq -r '.packageManager // empty' 'package.json')
        package_manager=${versioned_package_manager%@*}
        package_manager_version=${versioned_package_manager#*@}
        
        if [ -z "$versioned_package_manager" ]; then
          echo "::error ::Missing \`packageManager\` field in \`package.json\`. Please add it and try again."
          exit 1
        fi

        if [ "$package_manager" != 'yarn' ] || [[ "$package_manager_version" =~ ^1 ]]; then
          echo "::error ::This action only supports compatible versions of \`yarn\`. Please switch to \`yarn@2.x.x\` and try again."
          exit 1
        fi

    - name: Install package manager
      uses: GarnerCorp/build-actions/install-package-manager@main
      with:
        install-dependencies: false

    - name: Get yarn cache directory path
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        dir="$(yarn config get cacheFolder)"
        mkdir -p "$dir"
        echo "CACHE_DIR_YARN=$dir" | tee -a "$GITHUB_ENV"

    - name: Use Yarn Cache
      uses: actions/cache@v4
      id: yarn-cache
      with:
        path: ${{ env.CACHE_DIR_YARN }}
        key: yarn-${{ runner.os }}-${{ inputs.working-directory }}-${{ hashFiles(format('{0}/{1}', inputs.working-directory, 'yarn.lock')) }}
        restore-keys: yarn-${{ runner.os }}-${{ inputs.working-directory }}

    - name: Set up yarn credentials
      if: inputs.npm-username && inputs.npm-password
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        NPM_USER: ${{ inputs.npm-username }}
        NPM_PASSWORD: ${{ inputs.npm-password }}
        NPM_REGISTRY: ${{ inputs.npm-registry }}
      run: |
        perl -i -e 'next if /CACHE_DIR_YARN/;print ' "$GITHUB_ENV"
        yarn_credentials=$(echo -n "$NPM_USER:$NPM_PASSWORD" | base64)
        yarn config set npmAlwaysAuth true
        yarn config set npmRegistryServer "$NPM_REGISTRY"
        yarn config set npmAuthIdent "$yarn_credentials"

    - name: Install Dependencies
      id: install-dependencies
      run: yarn install
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Regenerate yarn.lock on failure
      if: ${{ failure() && steps.install-dependencies.conclusion == 'failure' }}
      shell: bash
      env:
        YARN_CHECKSUM_BEHAVIOR: update
      run: |
        yarn install
        (
          echo '# Bad `yarn.lock`'
          echo '## Bad local cache'
          echo 'This could be caused by bad locally cached packages.'
          echo 'Try running: [`yarn cache clean --all`](https://yarnpkg.com/cli/cache/clean#options)'
          echo '## Generated `yarn.lock` file'
          echo 'You can retrieve the `yarn.lock` file from artifacts (above)'
        ) >> "$GITHUB_STEP_SUMMARY"
      working-directory: ${{ inputs.working-directory }}

    - name: Upload regenerated yarn.lock on failure
      if: ${{ failure() && steps.install-dependencies.conclusion == 'failure' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.working-directory != '.' && format('{0}-', inputs.working-directory) || '' }}yarn.lock
        path: ${{ inputs.working-directory }}/yarn.lock

    - name: Build
      run: ${{ inputs.yarn-build-command }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Look for tests
      id: test-searcher
      if: inputs.test-file-pattern && fromJSON(inputs.test-file-pattern)
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        SOURCE_DIRECTORY: ${{ inputs.source-directory }}
        PATTERNS: ${{ inputs.test-file-pattern }}
      run: |
        TEST_FLAGS=$(
            echo "$PATTERNS" |

            jq -r '. | map(. | tojson) | map(" -name " + .) | join(" -o")'
        )

        if echo "$TEST_FLAGS" | xargs find "$SOURCE_DIRECTORY"
        then
          echo "has-tests=1" >> "$GITHUB_OUTPUT"
        fi

    - name: Test
      if: steps.test-searcher.outputs.has-tests
      shell: bash
      run: ${{ inputs.yarn-test-command }}
      working-directory: ${{ inputs.working-directory }}

    - name: Lint
      shell: bash
      run: ${{ inputs.yarn-lint-command }}
      working-directory: ${{ inputs.working-directory }}

    - name: "Google Auth"
      uses: "google-github-actions/auth@v2"
      if: ${{ inputs.google-credentials-json && inputs.google-cloud-sdk-version && ! env.ACT }}
      with:
        credentials_json: "${{ inputs.google-credentials-json }}"

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      if: ${{ inputs.google-credentials-json && inputs.google-cloud-sdk-version && ! env.ACT }}
      with:
        version: ${{ inputs.google-cloud-sdk-version }}
        project_id: ${{ inputs.container-project }}

    - name: Configure GCloud and Docker
      if: ${{ inputs.google-credentials-json && inputs.google-cloud-sdk-version && ! env.ACT }}
      shell: bash
      run: |
        gcloud auth configure-docker

    - name: Package
      if: ${{ ! inputs.skip-package }}
      shell: bash
      env:
        WORKING_DIRECTORY: ${{ inputs.working-directory }}
        BUILD_DIRECTORY: ${{ inputs.yarn-build-directory }}
        TARBALL: ${{ inputs.build-output-tarball }}
      run: tar czf "$TARBALL" *
      working-directory: "${{ env.WORKING_DIRECTORY }}/${{ env.BUILD_DIRECTORY }}"

    - name: Publish to NPM registry
      if: inputs.publish-to-registry == 'true'
      shell: bash
      env:
        BRANCH_NAME: ${{ github.event.pull_request.head.ref || github.ref_name }}
        COMMIT_SHA: "${{ github.event.pull_request.head.sha || github.sha }}"
        PUBLISH_BRANCH: ${{ inputs.publishing-branch }}
        PUBLISHING_DIRECTORY: ${{ inputs.publishing-directory }}

      run: |
        version="$(jq -r < package.json '.version')"
        if [ "$BRANCH_NAME" = "$PUBLISH_BRANCH" ]; then
            if [ -e "$PUBLISHING_DIRECTORY"/package.json ]; then
                cd $PUBLISHING_DIRECTORY
                cp ../yarn.lock .
            fi
            jq '.version="'"$version"'"' package.json > new_package.json
            mv new_package.json package.json
            yarn npm publish
        fi
