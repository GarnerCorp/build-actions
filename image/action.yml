name: "Build Image"
description: "Build an image"
author: "GarnerCorp"
branding:
  icon: "upload"
  color: "yellow"
inputs:
  container-registry:
    description: "Container Registry"
    default: "gcr.io"
    required: false
  container-project:
    description: "Path within container registry for team"
    required: true
  platforms:
    description: "The platforms for which to build the image"
    default: "linux/amd64,linux/arm64"
    required: false
  working-directory:
    description: "Directory containing Dockerfile"
    default: "."
    required: false
  dockerfile:
    description: "Name of Dockerfile"
    default: "Dockerfile"
    required: false
  google-credentials-json:
    description: "Google Service Account JSON file"
    default: ""
    required: false
  google-cloud-sdk-version:
    description: "Google Cloud SDK version"
    default: ""
    required: false
  image-name:
    description: "Name of OCI image"
    required: false
  image-tag:
    description: "Tag of OCI image"
    required: false
  rc-tag:
    description: "Tag used for release candidates"
    required: false
  additional-image-tags:
    description: "Copy image to these additional tags (possibly in other repositories)"
    required: false
  build-context:
    description: "The context for the docker"
    required: false
  build-args:
    description: "A comma separated list of build arguments to pass as --build-arg flags to docker build"
    required: false
outputs:
  image:
    description: "Generated image reference"
    value: ${{ steps.build-and-push-image.outputs.image }}

runs:
  using: "composite"
  steps:
    - name: Validate inputs
      if: ${{ !inputs.container-project || !inputs.google-credentials-json != !inputs.google-cloud-sdk-version }}
      shell: bash
      env:
        CODEPENDENT: '[ [ "google-cloud-sdk-version", "google-credentials-json" ] ]'
        INPUTS: ${{ toJSON(inputs) }}
      run: |
        "$GITHUB_ACTION_PATH/../scripts/report-missing-inputs.pl"

    - name: "Google Auth"
      uses: "google-github-actions/auth@v2"
      if: ${{ inputs.google-credentials-json && inputs.google-cloud-sdk-version && ! env.ACT }}
      with:
        credentials_json: "${{ inputs.google-credentials-json }}"

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      if: ${{ inputs.google-credentials-json && inputs.google-cloud-sdk-version && ! env.ACT }}
      with:
        version: ${{ inputs.google-cloud-sdk-version }}
        project_id: ${{ inputs.container-project }}

    - name: Add google registries
      shell: bash
      env:
        images: >-
          ${{ inputs.container-registry && inputs.container-project && format('{0}/{1}', inputs.container-registry, inputs.container-project) || ''}}
          ${{ inputs.additional-image-tags }}
      run: |
        : Configure docker gcloud credential helpers if they are not already configured
        registries=$(perl -e '
          my @images = split /\s+/, $ENV{images};
          my %repos;
          for my $image (@images) {
            $image =~ s</.*><>;
            next unless $image =~ /\bgcr\.io$|pkg\.dev$/;
            $repos{$image} = 1;
          }
          print join " ", sort keys %repos;
        ')
        if [ -n "$registries" ]; then
          echo ::group::Configure docker gcloud credential helpers
          for registry in $registries; do
            if [ "$(jq -r '.credHelpers["$registry"] // empty' ~/.docker/config.json)" = '' ] ; then
              gcloud auth configure-docker "$registry"
            fi
          done
          echo "::end"group::
        fi

    - name: Build and Push Image
      id: build-and-push-image
      shell: bash
      env:
        IMAGE: ${{ inputs.image-name || inputs.working-directory }}
        TAG: "${{ inputs.image-tag || github.event.pull_request.head.sha || github.sha }}"
        RC: "${{ inputs.rc-tag || github.event.pull_request.head.sha || github.sha }}-rc"
        REPOSITORY: "${{ inputs.container-registry }}/${{ inputs.container-project }}"
        PLATFORMS: ${{ inputs.platforms }}
        WORKING_DIRECTORY: ${{ inputs.working-directory }}
        DOCKERFILE: ${{ inputs.dockerfile }}
        BUILD_CONTEXT: ${{ inputs.build-context || inputs.working-directory }}
        BUILD_ARGS: ${{ inputs.build-args }}
      run: |
        "$GITHUB_ACTION_PATH/../scripts/docker-build-push.sh" -r "$REPOSITORY" -i "$IMAGE" -t "$TAG" -e "$RC" -p "$PLATFORMS" -d "$WORKING_DIRECTORY" -f "$DOCKERFILE" -c "$BUILD_CONTEXT"

    - name: Check for crane
      if: ${{ inputs.additional-image-tags }}
      id: crane
      shell: bash
      run: |
        : Check for crane
        if [ ! -e $GITHUB_WORKSPACE/../crane ]; then
          echo "needed=1" >> "$GITHUB_OUTPUT"
        fi

    - name: Install crane
      if: ${{ steps.crane.outputs.needed }}
      id: install-crane
      uses: check-spelling/gh-program-downloader@v0.0.1
      with:
        repository: google/go-containerregistry
        file-re: ^crane
        destination: "${{ github.workspace }}/../crane"

    - name: Copy images
      if: ${{ inputs.additional-image-tags }}
      shell: bash
      env:
        published: ${{ steps.build-and-push-image.outputs.image }}
        images: ${{ inputs.additional-image-tags }}
      run: |
        : Copy images
        for image in $images; do
          $GITHUB_WORKSPACE/../crane copy "$published" "$image"
        done

    - name: Summary
      shell: bash
      env:
        published: ${{ steps.build-and-push-image.outputs.image }}
        images: ${{ inputs.additional-image-tags }}
      run: |
        : Summary
        (
          echo '# Published images'
          echo
          for image in $published $images; do
            echo "* [$image](https://$image)"
          done
        ) >> "$GITHUB_STEP_SUMMARY"
