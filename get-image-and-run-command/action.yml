name: 'Get Image and Run Command'
description: 'Get an image and run a command (that presumably relies on the image)'
author: 'GarnerCorp'
branding:
  icon: 'codesandbox'
  color: 'blue'
inputs:
  image:
    description: "An image reference to be pulled by docker"
    required: true
    default: "busybox"
  workload-identity-provider:
    description: "The workload identity provider to use for pulling images (requires service-account)"
    required: false
  service-account:
    description: "The service account to use for pulling images (requires workload-identity-provider)"
    required: false
  command:
    description: "The command to run"
    required: false
  checkout:
    description: "Whether to check out the repository"
    required: false
  show-output-on-success:
    description: "Whether to show the output from the command on success in the job summary"
    required: false

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      if: ${{ !inputs.image || !inputs.workload-identity-provider != !inputs.service-account }}
      shell: bash
      env:
        INPUTS: ${{ toJSON(inputs) }}
        CODEPENDENT: ${{ inputs.checkout == 'true' && '[ [ "workload-identity-provider", "service-account" ], [ "checkout", "service-account" ], [ "checkout", "workload-identity-provider" ] ]' || '[ [ "workload-identity-provider", "service-account" ], [ "checkout", "service-account" ] ]' }}
      run: |
        "$GITHUB_ACTION_PATH/../scripts/report-missing-inputs.pl"

    - name: Checkout
      id: checkout
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@v4

    - name: Set up google docker credentials
      id: google-credentials
      if: ${{ inputs.workload-identity-provider && inputs.service-account }}
      uses: GarnerCorp/build-actions/configure-google-docker@main
      env:
        IMAGE: ${{ inputs.image }}
        WORKLOAD_IDENTITY_PROVIDER: ${{ inputs.workload-identity-provider }}
        SERVICE_ACCOUNT: ${{ inputs.service-account }}
      with:
        images: ${{ env.IMAGE }}
        workload-identity-provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
        service-account: ${{ env.SERVICE_ACCOUNT }}

    - name: Run command
      id: run-command
      env:
        IMAGE: ${{ inputs.image }}
        CMD: ${{ inputs.command }}
        CHECKOUT_OVERWRITE: ${{ steps.checkout.conclusion == 'success' && steps.google-credentials.conclusion == 'skipped' && env.GOOGLE_GHA_CREDS_PATH && '1' || '' }}
        NO_WIP: ${{ inputs.workload_identity_provider == '' && '1' || '' }}
        NO_SA: ${{ inputs.service-account == '' && '1' || '' }}
        SHOW_OUTPUT_ON_SUCCESS: ${{ inputs.show-output-on-success }}
      shell: bash
      run: |
        : 'Run command and report errors'
        if docker pull "$IMAGE"; then
          :
        else
           exit_code="$?"
           if [ -n "$CHECKOUT_OVERWRITE" ]; then
             (
                echo "# docker pull '$IMAGE' failed"
                echo '`inputs.checkout` was set, but a step before this action used google-github-actions/auth'
                echo 'you probably do not want to use `inputs.checkout`, or '
                echo "you need to use ${NO_WIP:+\`inputs.workload-identity-provider\` ${NO_SA:+and }}${NO_SA:+\`inputs.service-account\`}"
             ) >> "$GITHUB_STEP_SUMMARY"
           else
             (
                echo "# docker pull '$IMAGE' failed"
                echo "sorry, that's all we know"
             ) >> "$GITHUB_STEP_SUMMARY"
           fi
           exit $exit_code
        fi

        stdout_file=$(mktemp)
        stderr_file=$(mktemp)

        summarize() {
          (
            echo "## $1"
            echo
            echo '```'
            cat "$2"
            echo '```'
            echo
          ) >> $GITHUB_STEP_SUMMARY
        }

        if bash -c "$CMD" > "$stdout_file" 2> "$stderr_file"; then
          if [ "$SHOW_OUTPUT_ON_SUCCESS" == "true" ]; then
            summarize output $stdout_file
          fi
        else
          exit_code="$?"
          summarize output $stdout_file
          summarize error $stderr_file
          echo 'Errors detected: See summary for error report'
          exit "$exit_code"
        fi
