name: Prettier Action
description: Automatically runs prettier on all your changes.

author: 'GarnerCorp'

inputs:
  commit-message:
    description: Commit message, will be ignored if used with same-commit
    required: false
    default: "Run prettier to format the code"
  commit-description:
    description: Extended commit message, will be ignored if used with same-commit
    required: false
    default: ""
  same-commit:
    description: Update the current commit instead of creating a new one
    required: false
    default: "false"
  commit-options:
    description: Commit options
    required: false
  push-options:
    description: Git push options
    required: false
  file-pattern:
    description: File pattern used for `git add`, can't be used with only-changed!
    required: false
    default: "*"
  prettier-options:
    description: Options for the `prettier` command
    required: false
    default: "--write"
  file-extensions:
    description: If not specified, prettier will be interrogated for supported extensions
    required: false
    default: ""
  check-paths:
    description:
    required: false
    default: "**"
  dry:
    description: Run prettier in dry-run mode. Display which files are/aren't pretty and changes made by prettier in the GitHub job summary
    required: false
    default: "false"
  prettier-version:
    description: Version of prettier to use. Otherwise defaults to latest prettier version unless detect-prettier-version is specified. 
    required: false
    default: ""
  working-directory:
    description: Specify a directory to cd into before installing prettier and running it
    required: false
    default: ""
  only-changed:
    description: Only prettify files changed in the last commit, can't be used with file-pattern!
    required: false
    default: "false"
  prettier-plugins:
    description: Install Prettier plugins, i.e. `@prettier/plugin-php @prettier/plugin-other`
    required: false
    default: ""
  github-token:
    description: GitHub Token or PAT token used to authenticate against a repository
    required: false
    default: ${{ github.token }}
  push-to-remote:
    description: Whether or not to push prettified code to a remote
    required: false
    default: "false"
  checkout:
    description: Whether or not to checkout the repository you are currently working in
    required: false
    default: "true"
  checkout-token:
    description: Token to use for checking out repository
    required: false
    default: ""
  checkout-ssh-key:
    description: ssh key to use for checking out repository
    required: false
    default: ""
  detect-prettier-version:
    description: Whether or not to detect the prettier version from devDependencies
    required: false
    default: "true"
  update-git_blame_ignore_revs:
    description: Where to update `.git_blame_ignore_revs`
    required: false
    default: "false"
  debug:
    description: Debug action
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Check if we can push to remote
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      env:
        UPDATE_GIT_BLAME_IGNORE: ${{ inputs.update-git_blame_ignore_revs }}
        PUSH_TO_REMOTE: ${{ inputs.push-to-remote }}
        CAN_PUSH_TO_REMOTE: ${{ github.event_name == 'push' || (github.event.pull_request.base.user.id == github.event.pull_request.head.user.id) }}
      run: |
        if [ "$PUSH_TO_REMOTE" = 'true' ]; then
          if [ "$UPDATE_GIT_BLAME_IGNORE" = 'true' ]; then
            if [ "$CAN_PUSH_TO_REMOTE" = 'true' ]; then
              echo "INPUT_UPDATE_GIT_BLAME_IGNORE_REVS=true" >> "$GITHUB_ENV"
            fi
          else
            echo '::warning title=Incompatible option::update-git_blame_ignore_revs=true only works with push-to-remote=true'
          fi
          echo "PUSH_TO_REMOTE=true" >> "$GITHUB_ENV"
        else
          echo "PUSH_TO_REMOTE=false" >> "$GITHUB_ENV"
        fi

    - name: Clone repository
      uses: actions/checkout@v4
      if: inputs.checkout == 'true'
      with:
        path: ${{ inputs.working-directory }}
        ssh-key: ${{ inputs.checkout-ssh-key }}
        token: ${{ inputs.checkout-token || github.token }}
        persist-credentials: ${{ env.PUSH_TO_REMOTE }}

    - name: Stub remote to suppress pushes
      working-directory: ${{ inputs.working-directory }}
      if: ${{ env.PUSH_TO_REMOTE != 'true' }}
      shell: bash
      run: |
        git remote rename origin github
        git remote add origin .

    - name: Get prettier version from dependencies
      id: get-prettier-version
      if: inputs.detect-prettier-version == 'true'
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        if [ -s package.json ]; then
          prettier_version=$(jq -r '.devDependencies.prettier // ""' package.json)
          echo "prettier_version=$prettier_version" >> $GITHUB_OUTPUT
        fi
        if [ -z "$prettier_version" ]; then
          echo '::warning title=Prettier version detection::Failed to detect prettier version. Using default.'
        fi

    - name: Prettify code!
      shell: bash
      run: ${{ github.action_path }}/entrypoint.sh
      env:
        INPUT_COMMIT_MESSAGE: ${{ inputs.commit-message }}
        INPUT_COMMIT_DESCRIPTION: ${{ inputs.commit-description }}
        INPUT_SAME_COMMIT: ${{ inputs.same-commit }}
        INPUT_COMMIT_OPTIONS: ${{ inputs.commit-options }}
        INPUT_PUSH_OPTIONS: ${{ inputs.push-options }}
        INPUT_FILE_PATTERN: ${{ inputs.file-pattern }}
        INPUT_PRETTIER_OPTIONS: ${{ inputs.prettier-options }}
        INPUT_DRY: ${{ inputs.dry }}
        INPUT_PRETTIER_VERSION: ${{ steps.get-prettier-version.outputs.prettier_version || inputs.prettier-version }}
        INPUT_ONLY_CHANGED: ${{ inputs.only-changed }}
        INPUT_PRETTIER_PLUGINS: ${{ inputs.prettier-plugins }}
        INPUT_WORKING_DIRECTORY: ${{ inputs.working-directory }}
        INPUT_GITHUB_TOKEN: ${{ inputs.github-token }}
        INPUT_FILE_EXTENSIONS : ${{ inputs.file-extensions}}
        INPUT_CHECK_PATHS: ${{ inputs.check-paths }}
        INPUT_DEBUG: ${{ inputs.debug }}

branding:
  icon: "award"
  color: "green"
